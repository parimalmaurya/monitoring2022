# Species distribution modeling for Ailanthus altissima & Impatiens glandulifera
# Parimal Maurya
# Global Change Ecology & Sustainable Development Goals
# 2024-08-09


# First steps: 

# Setting up the working directory 
setwd("C:/Users/parim/Desktop/r_projects/invasivesp_modelling")

#Accessing all required packages 

library(terra)
library(tidyterra)
library(dplyr)
library(geodata)
library(predicts)
library(raster)         # allows modeling with analysis of spatial data
library(ggplot2)        # used to create easily adjustable and visually appealing plots 
library(maps)           # library for world map data


## loading the dataset
gbif_data <- read.csv("C:/Users/parim/Desktop/r_projects/invasivesp_modelling/gbif_data.csv")

# View the structure of the dataset
str(gbif_data)

# view first few rows of the dataset
head(gbif_data)

# keeping records with given taxon key
taxon_keys_to_keep <- c(2891770, 3190653)  
invasivesp_data <- gbif_data[gbif_data$taxonKey %in% taxon_keys_to_keep, ]

# keeping the columns of interest
columns_to_keep <- c("scientificName", "decimalLatitude", "decimalLongitude", "occurrenceStatus", "speciesKey", "order", 
                     "family", "species", "genus", "infraspecificEpithet", "coordinateUncertaintyInMeters", "year", "month", 
                      "license", "countryCode", "locality", "collectionCode", "basisOfRecord", "individualCount", "taxonKey")
columns_to_keep <- columns_to_keep[columns_to_keep %in% colnames(invasivesp_data)] 
invasivesp_data <- invasivesp_data[,columns_to_keep]

# removing records without coordinates
# Convert decimalLongitude and decimalLatitude to numeric
invasivesp_data$decimalLongitude <- as.numeric(as.character(invasivesp_data$decimalLongitude))
invasivesp_data$decimalLatitude <- as.numeric(as.character(invasivesp_data$decimalLatitude))
invasivesp_data <- invasivesp_data %>%  filter(!is.na(decimalLongitude)) %>%  filter(!is.na(decimalLatitude))

# List of ISO 3166-1 alpha-2 country codes for European countries 
european_countries <- c("AL", "AM", "AT","BY", "BE", "BA", "BG", "HR", "CZ", "DK", "EE", "FI", "FR", 
                          "DE", "GR", "HU", "IS", "IT", "LV", "LI", "LT", "LU", "MT", "MD", "MC", "ME",
                          "NL", "NO", "PL", "PT", "RO", "SM", "RS", "SK", "SI", "ES", "SE", "CH", "UA", "VA") 

invasivesp_data <- invasivesp_data[invasivesp_data$countryCode %in% european_countries, ]

#Remove records with low coordinate precision
invasivesp_data %>% 
  mutate(Uncertainty = coordinateUncertaintyInMeters / 1000) %>% 
  ggplot(aes(x = Uncertainty)) + 
  geom_histogram() +
  xlab("Coordinate uncertainty in meters") +
  theme_bw()
invasivesp_data <- invasivesp_data %>%
  filter(coordinateUncertaintyInMeters / 1000 <= 100 | is.na(coordinateUncertaintyInMeters)) 

# remove unsuitable data sources, and keep only those listed here
keeping_record <- c("LIVING_SPECIMEN", "HUMAN_OBSERVATION", "PRESERVED_SPECIMEN")
invasivesp_data <- invasivesp_data[invasivesp_data$basisOfRecord %in% keeping_record, ]

#Age of records: removing records before 2000
table(invasivesp_data$year)
invasivesp_data <- invasivesp_data %>% filter(year > 2000)

# Indiviual count: Removing records with less than 1 observation
# Convert the individualCount column to numeric, coercing empty strings to NA
invasivesp_data$individualCount <- as.numeric(invasivesp_data$individualCount)
# Filter out records with less than 1 observation
invasivesp_data <- invasivesp_data[!is.na(invasivesp_data$individualCount) & invasivesp_data$individualCount < 99, ]

# rename latitude and longitude columns
invasivesp_data <- invasivesp_data %>% rename("LAT"=decimalLatitude, "LONG"=decimalLongitude)

write.csv(invasivesp_data, 
          file="occurrence_data_cleaned.csv", 
          row.names = FALSE)

## Downloading present & future bioclimatic variable data 
bioclim_data <- worldclim_global(var = "bio",
                                 res = 5,
                                 path = "data/")

# Download predicted climate data

forecast_data <- cmip6_world(model = "MPI-ESM1-2-HR",
                             ssp = "585",
                             time = "2061-2080",
                             var = "bioc",
                             res = 5,
                             path = "data")

# Determine geographic extent of our data
max_lat <- ceiling(max(invasivesp_data$LAT))
min_lat <- floor(min(invasivesp_data$LAT))
max_lon <- ceiling(max(invasivesp_data$LONG))
min_lon <- floor(min(invasivesp_data$LONG))

# Store boundaries in a single extent object
geographic_extent <- ext(x = c(min_lon, max_lon, min_lat, max_lat))

## Plotting occurrences on map 

# Taxon keys for the two species
species_1_key <- 2891770
species_2_key <- 3190653
 
# Filter data for each species
species_1_data <- invasivesp_data %>% filter(taxonKey == species_1_key)
species_2_data <- invasivesp_data %>% filter(taxonKey == species_2_key)

# Downloading data with geodata's world function to use for our base map
world_map <- world(resolution = 3,
                   path = "data/")

# Cropping the map to our area of interest
my_map <- crop(x = world_map, y = geographic_extent)

# Plotting the base map for species 1
plot(my_map,
     axes = TRUE, 
     col = "grey95",
     main = "Occurrence of Impatiens glandulifera")

# Adding the points for individual observations 
points(x = species_1_data$LONG, 
       y = species_1_data$LAT, 
       col = "olivedrab", 
       pch = 20, 
       cex = 0.40)

# Plotting the base map for species 2
plot(my_map,
     axes = TRUE, 
     col = "grey95",
     main = "Occurrence of Ailanthus altissima")

# Adding the points for individual observations 
points(x = species_2_data$LONG, 
       y = species_2_data$LAT, 
       col = "darkorange", 
       pch = 20, 
       cex = 0.40)

### Preparing data for modelling

# Make an extent that is 25% larger
sample_extent <- geographic_extent * 1.25

# Crop bioclim data to desired extent
bioclim_data <- crop(x = bioclim_data, y = sample_extent)

# Setting the seed for the random-number generator to ensure results are similar
set.seed(42)

# Randomly sample points 
background <- spatSample(x = bioclim_data,
                         size = 10000,
                         values = FALSE, # don't need values
                         na.rm = TRUE,   # don't sample from ocean
                         xy = TRUE)      # just need coordinates

For Species 1: Impatiens glandulifera Royle

# Pulling out coordinate columns, LONG (longitude) first, then LAT (latitude) from our dataset for Impatiens glandulifera Royle
presence1 <- species_1_data[, c("LONG", "LAT")]
# Add column indicating presence
presence1$pa1 <- 1

# Convert background data to a data frame
absence1 <- as.data.frame(background)
# Update column names so they match presence points
colnames(absence1) <- c("LONG", "LAT")
# Add column indicating absence
absence1$pa1 <- 0

# Joining data into single data frame
all_points1 <- rbind(presence1, absence1)

# Extracting climate data for all those points
bioclim_extract1 <- extract(x = bioclim_data,
                           y = all_points1[, c("LONG", "LAT")],
                           ID = FALSE) 

# Adding the point and climate datasets together
points_climate1 <- cbind(all_points1, bioclim_extract1)

# Identifying columns that are latitude & longitude
drop_cols1 <- which(colnames(points_climate1) %in% c("LONG", "LAT"))

# Removing the geographic coordinates from the data frame
points_climate1 <- points_climate1[, -drop_cols1]

## Training & Testing data
# Creating vector indicating fold to separate training and testing data
fold1 <- folds(x = points_climate1,
              k = 5,
              by = points_climate1$pa1)

# Separating data into training and testing sets
testing1 <- points_climate1[fold1 == 1, ]
training1 <- points_climate1[fold1 != 1, ]

# Model Builiding
# Building a model using training data
glm_model1 <- glm(pa1~., data = training1, family = binomial())

# Getting predicted values from the model
glm_predict1 <- predict(bioclim_data, glm_model1, type = "response")

# Print predicted values 
plot(glm_predict1)

# Use testing data for model evaluation
glm_eval1 <- pa_evaluate(p = testing1[testing1$pa1 == 1, ],
                        a = testing1[testing1$pa1 == 0, ],
                        model = glm_model1,
                        type = "response")

# Determining minimum threshold for "presence"
glm_threshold1 <- glm_eval1@thresholds$max_spec_sens

# Plotting the results
# Plotting base map
plot(my_map, 
     axes = TRUE, 
     col = "grey95",
     main= "")

# Only plotting areas where probability of occurrence is greater than the threshold
plot(glm_predict1 > glm_threshold1, 
     add = TRUE, 
     legend = FALSE, 
     col = c(NA, "olivedrab")) 

# Adding observations
points(x = species_1_data$LONG, 
       y = species_1_data$LAT, 
       col = "black",
       pch = 20, 
       cex = 0.20)

# Redrawing country borders
plot(my_map, add = TRUE, border = "grey5")

## For future scenarios, 

# Using names from bioclim_data
names(forecast_data1) <- names(bioclim_data)
# Crop forecast data to desired extent
forecast_data1 <- crop(x = forecast_data1, y = sample_extent)
# Predict presence from model with forecast data
forecast_presence1 <- predict(forecast_data1, glm_model1, type = "response")

# Plot base map
plot(my_map, 
     axes = TRUE, 
     col = "grey95",
     main = "")

# Add model probabilities
plot(forecast_presence1, add = TRUE)

# Redraw those country borders
plot(my_map, add = TRUE, border = "grey5")

# Add original observations
points(x = species_1_data$LONG, 
       y = species_1_data$LAT, 
       col = "black", 
       pch = 20, 
       cex = 0.30)

# Plotting predictions for presence / absence
# Plot base map
plot(my_map, 
     axes = TRUE, 
     col = "grey95")

# Only plot areas where probability of occurrence is greater than the threshold
plot(forecast_presence1 > glm_threshold1, 
     add = TRUE, 
     legend = FALSE, 
     col = c(NA, "olivedrab"))

# And add those observations
points(x = species_1_data$longitude, 
       y = species_1_data$latitude, 
       col = "black",
       pch = 20, 
       cex = 0.30)

# Redraw those country borders
plot(my_map, add = TRUE, border = "grey5")

For Species 2: Ailanthus altissima

# Pulling out coordinate columns, LONG (longitude) first, then LAT (latitude) from our dataset for Ailanthus altissima

presence2 <-  species_2_data[, c("LONG", "LAT")]
# Add column indicating presence
presence2$pa2 <- 1

# Converting background data to a data frame
absence2 <- as.data.frame(background)
# Updating column names so they match presence points
colnames(absence2) <- c("LONG", "LAT")
# Adding column indicating absence
absence2$pa2 <- 0

# Joining data into single data frame
all_points2 <- rbind(presence2, absence2)

# Extracting climate data for all those points
bioclim_extract2 <- extract(x = bioclim_data,
                           y = all_points2[, c("LONG", "LAT")],
                           ID = FALSE) # No need for an ID column

# Adding the point and climate datasets together
points_climate2 <- cbind(all_points2, bioclim_extract2)

# Identifying columns that are latitude & longitude
drop_cols2 <- which(colnames(points_climate2) %in% c("LONG", "LAT"))

# Removing the geographic coordinates from the data frame
points_climate2 <- points_climate2[, -drop_cols2]

## Training & Testing data
# Creating vector indicating fold to separate training and testing data
fold2 <- folds(x = points_climate2,
              k = 5,
              by = points_climate2$pa2)

# Separating data into training and testing sets
testing2 <- points_climate2[fold2 == 1, ]
training2 <- points_climate2[fold2 != 1, ]

# Model Builiding
# Building a model using training data
glm_model2 <- glm(pa2~., data = training2, family = binomial())

# Getting predicted values from the model
glm_predict2 <- predict(bioclim_data, glm_model2, type = "response")

# Print predicted values 
plot(glm_predict2)

# Use testing data for model evaluation
glm_eval2 <- pa_evaluate(p = testing2[testing2$pa2 == 1, ],
                         a = testing2[testing2$pa2 == 0, ],
                         model = glm_model2,
                         type = "response")

# Determining minimum threshold for "presence"
glm_threshold2 <- glm_eval2@thresholds$max_spec_sens

# Plotting the results

# Plotting base map
plot(my_map, 
     axes = TRUE, 
     col = "grey95",
      main = "")

# Only plotting areas where probability of occurrence is greater than the threshold
plot(glm_predict2 > glm_threshold2, 
     add = TRUE, 
     legend = FALSE, 
     col = c(NA, "darkorange")) 

# Adding observations
points(x = species_2_data$LONG, 
       y = species_2_data$LAT, 
       col = "black",
       pch = 20, 
       cex = 0.20)

# Redrawing country borders
plot(my_map, add = TRUE, border = "grey5")


## For future scenarios, 

# Using names from bioclim_data
names(forecast_data) <- names(bioclim_data)
# Crop forecast data to desired extent
forecast_data <- crop(x = forecast_data, y = sample_extent)
# Predict presence from model with forecast data
forecast_presence2 <- predict(forecast_data, glm_model2, type = "response")

# Plot base map
plot(my_map, 
     axes = TRUE, 
     col = "grey95",
     main = "")

# Add model probabilities
plot(forecast_presence2, add = TRUE)

# Redraw those country borders
plot(my_map, add = TRUE, border = "grey5")

# Add original observations
points(x = species_2_data$LONG, 
       y = species_2_data$LAT, 
       col = "black", 
       pch = 20, 
       cex = 0.30)

# Plotting predictions for presence / absence
# Plot base map
plot(my_map, 
     axes = TRUE, 
     col = "grey95")

# Only plot areas where probability of occurrence is greater than the threshold
plot(forecast_presence2 > glm_threshold2, 
     add = TRUE, 
     legend = FALSE, 
     col = c(NA, "darkorange"))

# And add those observations
points(x = species_2_data$LONG, 
       y = species_2_data$LAT, 
       col = "black",
       pch = 20, 
       cex = 0.30)

# Redraw those country borders
plot(my_map, add = TRUE, border = "grey5")

